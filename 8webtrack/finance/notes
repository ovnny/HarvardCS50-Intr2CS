Finance TODOs:

    accountNo.
        be348867d4e5c5c82ac2fb6f23189ef2

    API Tokens
        pk_975f882aaa6c435e82e629184ebec96f



    . register - permite os usuários a se registrarem para uma nova conta.
Se o método for "GET" apenas apresentar a página de "registration". Ele será
parecido com "login.html" mas com um campo de confirmação de e-mail. Confirm 2x.

Se o método for "POST", checar se existem duplicidades com o nome digitado no
formulário e os dados no db(users table). Caso não haja duplicidade, realizar o
cadastro do usuário fazendo o hash da sua senha.
________________________________________________________________________________

    . quote - permitir ao usuário olhar o formulário de requisição de uma deter-
-minada ação via "GET" e via "POST" fazer uma requisição via API para o site
terceiro e extrair os dados apresentando-o na página (redirecionar???)
________________________________________________________________________________

    . buy - "GET" mostra o formulário de compra (nome da ação e quantidade),
o preço final será mostrado via "POST" fazer uma requisição via API para o site
terceiro e extrair os dados com os devidos error handlings.
________________________________________________________________________________

OBS: Posso criar uma ou mais tables no db para ajudar a lidar com as requisições dos
usuários. Exemplo: ação compra, venda, data, hora.

    . index - Mostrar uma tabela com os stocks dos usuários e o número de ações
que cada um tem. O preço atual de cada ação(API) e o valor total do holding de
cada um.
Mostrar o balanço atual do usuário (quanto de $$$ ele possui).

    . sell

    . history - mostrar ao usuário um histórico de $$$, compra e venda

    . Personal touch - OAUTH2? permitir ao usuário trocar a senha.


________________________________________________________________________________

sqlite> SELECT * FROM usertrade WHERE id = 2;                                                                 
"""
trade_id| tradeState| symbol| companyname  |qty | price  | totaltrade|        day       |   hour   |id
1       | BUY       | aapl  | Apple Inc    | 3  | 131.97 | 395.91    | December 22 2020 | 17:25:42 | 1
2       | BUY       | tsla  | Tesla Inc    | 2  | 622.13 | 1244.26   | December 22 2020 | 17:25:53 | 1
3       | BUY       | uber  | Uber T...    | 3  | 53.165 | 159.495   | December 22 2020 | 17:26:17 | 1
        |           |       |              |    |        |           |                  |          |
        |           |       |              |    |        |           |                  |          |
trade_id| tradeState| symbol| companyname  |qty | price  | totaltrade|        day       |   hour   |id
4       | BUY       | tsla  | Tesla Inc    | 2  | 621.8  | 1243.6    | December 22 2020 | 17:27:09 | 2
5       | BUY       | aapl  | Apple Inc    | 3  | 131.945| 395.835   | December 22 2020 | 17:27:17 | 2
6       | BUY       | aapl  | Apple Inc    | 5  | 131.935| 659.675   | December 22 2020 | 17:27:24 | 2
7       | BUY       | uber  | Uber T...    | 5  | 53.175 | 265.875   | December 22 2020 | 17:27:31 | 2

"""


                    <class 'list'>
userShares = [
                {'symbol': 'aapl', 'companyname': 'Apple Inc'},
                {'symbol': 'tsla', 'companyname': 'Tesla Inc'},
                {'symbol': 'uber', 'companyname': 'Uber Tech'}
             ]
________________________________________________________________________________                 
                    
                    <class 'list'>
shares = [] 
________________________________________________________________________________
                    
                    <class 'str'>

symbol = uber
________________________________________________________________________________

                    <class 'list'>

updatedUserStatus:  ['SELL', 53.56, 7488.575000000001, 2]
________________________________________________________________________________

                    <class 'list'>

[{'SUM(quantity)': 3}]
________________________________________________________________________________

status = [  'SELL', 'uber', 'Uber Technologies Inc',
            1, 53.5, 53.5, 'December 23 2020',
            '16:15:03', 1
        ]
________________________________________________________________________________

index.html                  logged as 'vini@mail.com'
                            <a>logout</a>
                                                
    stocks  | qty | current price | holding |
    AAPL       2        U$109,64    2 * 109
    TSLA       3        U$611,22      ...
    UBER       4        U$48,90       ...

    total holding. . . . . . . . . U$3.200,00
    total cash . . . . . . . . . . U$6.950,00

                  Current yields. U%10.150,00


                              total trades: 9
                last trade: dezember, 20 2020
                                   __________

table > userstatus

    status_id| company   | stocks | id |
        1       AAPL          2      1
        2       TSLA          3      1
        3       UBER          4      1
________________________________________________________________________________

lastTradelenght = 1                            type = <class 'list'>

lastTrade = [
            {'trade_id': 4, 'tradeState': 'BUY', 'symbol': 'aapl',
             'companyname': 'Apple Inc', 'quantity': 10,
             'price': 131.97, 'totaltrade': 1319.7,
             'day': 'December 26 2020', 'hour': '23:18:24', 'id': 1  }
]


CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE users (
id INTEGER PRIMARY KEY,
username TEXT NOT NULL,
cash REAL NOT NULL DEFAULT 10000.00,
hash TEXT NOT NULL

);
CREATE UNIQUE INDEX username ON users(username)
;
CREATE TABLE usertrade (
trade_id INTEGER PRIMARY KEY,
tradeState TEXT DEFAULT NULL,
symbol TEXT NOT NULL,
companyname TEXT NOT NULL,
quantity INTEGER NOT NULL,
price REAL NOT NULL,
totaltrade REAL DEFAULT NULL,
day TEXT NOT NULL,
hour TEXT NOT NULL,
id INTEGER,
FOREIGN KEY(id)
    REFERENCES users(id)
);
CREATE TABLE userstatus (
symbl TEXT NOT NULL,
stocks INTEGER,
id INTEGER NOT NULL,
FOREIGN KEY(id) REFERENCES users(id)
);

________________________________________________________________________________

SELECT * FROM usertrade WHERE
                                    tradeState = 'BUY' AND
                                    symbol = :symbol AND id = :uid
                                    ORDER BY trade_id DESC LIMIT 1""",
                                    symbol=symbol, uid=int(session['user_id']))


SELECT DISTINCT 
symbl, companyname, stocks
FROM userstatus INNER JOIN
usertrade ON userstatus.id=usertrade.id
WHERE symbl = symbol;

accountNo.
        be348867d4e5c5c82ac2fb6f23189ef2

    API Tokens
        pk_975f882aaa6c435e82e629184ebec96f
________________________________________________________________________________

cash:  3439.36 <class 'list'>
prices:  1918.7949999999998 <class 'list'>
TOTAL:  $1,731.48 <class 'str'>